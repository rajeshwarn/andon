//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace wsLineHostController.ServiceReference2 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.IAssembLine")]
    public interface IAssembLine {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssembLine/Execute", ReplyAction="http://tempuri.org/IAssembLine/ExecuteResponse")]
        void Execute();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssembLine/Terminate", ReplyAction="http://tempuri.org/IAssembLine/TerminateResponse")]
        void Terminate();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssembLine/Move", ReplyAction="http://tempuri.org/IAssembLine/MoveResponse")]
        void Move();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssembLine/GetState", ReplyAction="http://tempuri.org/IAssembLine/GetStateResponse")]
        int GetState();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssembLine/GetCounter", ReplyAction="http://tempuri.org/IAssembLine/GetCounterResponse")]
        int GetCounter();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssembLine/GetStations", ReplyAction="http://tempuri.org/IAssembLine/GetStationsResponse")]
        LineService.LineStationBase[] GetStations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssembLine/RemoveStation", ReplyAction="http://tempuri.org/IAssembLine/RemoveStationResponse")]
        void RemoveStation(string LineStationRemoveId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssembLine/PushStationButton", ReplyAction="http://tempuri.org/IAssembLine/PushStationButtonResponse")]
        int PushStationButton(int StationIndex, string ControlKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssembLine/ReadStationButton", ReplyAction="http://tempuri.org/IAssembLine/ReadStationButtonResponse")]
        string ReadStationButton(int StationIndex, string ControlKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssembLine/ReadStationName", ReplyAction="http://tempuri.org/IAssembLine/ReadStationNameResponse")]
        string ReadStationName(int StationIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssembLine/SetOPCMode", ReplyAction="http://tempuri.org/IAssembLine/SetOPCModeResponse")]
        void SetOPCMode(bool mode, string OPCServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssembLine/GetOPCMode", ReplyAction="http://tempuri.org/IAssembLine/GetOPCModeResponse")]
        bool GetOPCMode();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssembLine/ReadProduct", ReplyAction="http://tempuri.org/IAssembLine/ReadProductResponse")]
        string ReadProduct(int StationIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssembLine/ReadFrame", ReplyAction="http://tempuri.org/IAssembLine/ReadFrameResponse")]
        LineService.Frame ReadFrame();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssembLine/GetProductStock", ReplyAction="http://tempuri.org/IAssembLine/GetProductStockResponse")]
        LineService.ProductBase[] GetProductStock();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssembLine/GetStationBuffer", ReplyAction="http://tempuri.org/IAssembLine/GetStationBufferResponse")]
        LineService.ProductBase[] GetStationBuffer(int stationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssembLine/ReadRealTimeData", ReplyAction="http://tempuri.org/IAssembLine/ReadRealTimeDataResponse")]
        LineService.StationRealtimeData[] ReadRealTimeData(int StationIndex);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAssembLineChannel : wsLineHostController.ServiceReference2.IAssembLine, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AssembLineClient : System.ServiceModel.ClientBase<wsLineHostController.ServiceReference2.IAssembLine>, wsLineHostController.ServiceReference2.IAssembLine {
        
        public AssembLineClient() {
        }
        
        public AssembLineClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AssembLineClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AssembLineClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AssembLineClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Execute() {
            base.Channel.Execute();
        }
        
        public void Terminate() {
            base.Channel.Terminate();
        }
        
        public void Move() {
            base.Channel.Move();
        }
        
        public int GetState() {
            return base.Channel.GetState();
        }
        
        public int GetCounter() {
            return base.Channel.GetCounter();
        }
        
        public LineService.LineStationBase[] GetStations() {
            return base.Channel.GetStations();
        }
        
        public void RemoveStation(string LineStationRemoveId) {
            base.Channel.RemoveStation(LineStationRemoveId);
        }
        
        public int PushStationButton(int StationIndex, string ControlKey) {
            return base.Channel.PushStationButton(StationIndex, ControlKey);
        }
        
        public string ReadStationButton(int StationIndex, string ControlKey) {
            return base.Channel.ReadStationButton(StationIndex, ControlKey);
        }
        
        public string ReadStationName(int StationIndex) {
            return base.Channel.ReadStationName(StationIndex);
        }
        
        public void SetOPCMode(bool mode, string OPCServerName) {
            base.Channel.SetOPCMode(mode, OPCServerName);
        }
        
        public bool GetOPCMode() {
            return base.Channel.GetOPCMode();
        }
        
        public string ReadProduct(int StationIndex) {
            return base.Channel.ReadProduct(StationIndex);
        }
        
        public LineService.Frame ReadFrame() {
            return base.Channel.ReadFrame();
        }
        
        public LineService.ProductBase[] GetProductStock() {
            return base.Channel.GetProductStock();
        }
        
        public LineService.ProductBase[] GetStationBuffer(int stationId) {
            return base.Channel.GetStationBuffer(stationId);
        }
        
        public LineService.StationRealtimeData[] ReadRealTimeData(int StationIndex) {
            return base.Channel.ReadRealTimeData(StationIndex);
        }
    }
}
